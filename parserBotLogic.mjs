import TelegramBot from 'node-telegram-bot-api'
import 'dotenv/config'
import { MongoClient } from 'mongodb'
import { commands, jobGroup, targetGroups } from './const.js'
import axios from 'axios'
import fs from 'fs'
import path from 'path'

const MONGO_URL = process.env.MONGO_URL
const client = new MongoClient(MONGO_URL)
await client.connect()
console.log('Connected successfully to db')
const db = client.db('parser-bot')
const userCollection = db.collection('users')
const stateCollection = db.collection('state')

const usersMap = {}

export default class BotLogic {
  constructor ({
    apiToken
  }) {
    this.apiToken = apiToken
    this.bot = null
  }

  async start () {
    if (!this.bot) {
      this.bot = new TelegramBot(this.apiToken, { polling: true })
      console.log('parser-bot started')
      await this.bot.setMyCommands(commands)
      this.bot.on('message', msg => this.onMessage(msg))
      this.bot.on('channel_post', msg => this.onChannelPost(msg))
      this.bot.on('photo', msg => this.onFile(msg))
      // this.bot.on('callback_query', msg => this.onCallback(msg))
      setInterval(() => this.parseAndPostToMyGroup(), 30 * 60 * 1000) // –ø–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π —á–∞—Å
    }
  }

  async onChannelPost (msg) {
    console.log('msg', msg)
  }

  async onMessage (msg) {
    try {
      if (msg.text) {
        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ:', msg.text, 'userName:', msg?.from.username ? `@${msg?.from.username}` : '', 'first_name:', msg?.from.first_name, 'id:' + msg?.from.id)
        const profile = await userCollection.findOne({ id: msg.from.id })

        if (profile) {
          if (!profile.active) {
            await this.bot.sendMessage(msg.from.id, '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –µ—â–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω')
            return
          }

          if (profile.banned) {
            await this.bot.sendMessage(msg.from.id, '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º')
          }
        }

        if (msg.text === '/start') {
          if (!profile) {
            await this.registration(msg)
            return
          }

          if (profile) {
            await this.bot.sendMessage(msg.from.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')
            return
          }
        }

        const chatId = msg.chat?.id
        const user = msg?.from.first_name
        const userName = msg?.from.username ? `@${msg?.from.username}` : ''
        const userId = msg?.from.id

        if (!usersMap[chatId]) {
          usersMap[chatId] = {
            username: userName,
            firstName: user,
            userId,
            step: 0,
            photo: '',
            groupId: '',
            token: profile.token,
            group_parsing: false
          }
        }

        if (msg.text === '/group_parsing') {
          if (!usersMap[chatId].token) {
            await this.bot.sendMessage(msg.from.id, '–ü–µ—Ä–µ–π–¥–∏ –ø–æ <a href="https://oauth.vk.com/authorize?client_id=6121396&scope=offline&redirect_uri=https://oauth.vk.com/blank.html&display=page&response_type=token&revoke=1">—Å—Å—ã–ª–∫–µ</a>, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ø–æ–ª—É—á–∏–≤—à—É—é—Å—è —Å—Å—ã–ª–∫—É –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.', { parse_mode: 'HTML' })
            return
          }
          usersMap[chatId].step = 1
          await this.bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: "public123456" –∏–ª–∏ "club78910"')
          return
        }

        const step = usersMap[chatId]?.step || 0
        // STEP 1 ‚Äî –æ–∂–∏–¥–∞–µ–º ID –≥—Ä—É–ø–ø—ã
        if (step === 1) {
          usersMap[chatId].groupId = msg.text.trim()
          usersMap[chatId].step = 2
          await this.bot.sendMessage(chatId, '–°–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ —Å–ø–∞—Ä—Å–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–æ 100')
          return
        }

        // STEP 2 ‚Äî –æ–∂–∏–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
        if (step === 2) {
          const count = parseInt(msg.text.trim(), 10)
          if (isNaN(count) || count <= 0) {
            await this.bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ 100')
            return
          }

          usersMap[chatId].postCount = count
          usersMap[chatId].step = 0 // –°–±—Ä–æ—Å –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

          // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–∑–∞–≥–æ—Ç–æ–≤–∫–∞)
          await this.bot.sendMessage(chatId, `–ü–∞—Ä—Å–∏–º ${count} –ø–æ—Å—Ç–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã ${usersMap[chatId].groupId}...`)
          await this.getGroupPosts(chatId, usersMap[chatId].groupId, count)
          return
        }

        if (/access/i.test(msg.text)) {
          const regex = /access_token=([^&]+)/
          const match = msg.text.match(regex)

          if (match) {
            const accessToken = match[1]
            console.log('Access Token:', accessToken)
            usersMap[chatId].token = accessToken
            await userCollection.updateOne({ id: userId }, { $set: { 'token': accessToken } })
            await this.bot.sendMessage(chatId, '–í–∞—à —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω')
          } else {
            console.log('Access Token not found')
          }
        }

        if (/—Å–¥–µ–ª–∞—Ç—å –ø–æ—Å—Ç/i.test(msg.text)) {
          const text = msg.text.split('|')[1].trim()
          await this.postToGroup(text, chatId)
        }
      }
    } catch (e) {
      console.log('Failed onMessage', e.message)
    }
  }

  async postToGroup (text, chatId) {
    try {
      const res = await axios.post('https://api.vk.com/method/wall.post', null, {
        params: {
          owner_id: jobGroup,
          from_group: 1,
          message: text,
          access_token: usersMap[chatId].token,
          v: '5.199'
        }
      })

      console.log('‚úÖ –û—Ç–≤–µ—Ç:', JSON.stringify(res.data, null, 2))

      console.log('‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω:', res.data.response)
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', e.response?.data || e.message)
    }
  }

  async getGroupPosts(chatId, GROUP_DOMAIN, count) {
    try {
      const API_VERSION = '5.199'
      const ACCESS_TOKEN = usersMap[chatId]?.token

      if (!ACCESS_TOKEN) {
        await this.bot.sendMessage(chatId, '‚ùóÔ∏è –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞.')
        return
      }

      const response = await axios.get('https://api.vk.com/method/wall.get', {
        params: {
          access_token: ACCESS_TOKEN,
          v: API_VERSION,
          domain: GROUP_DOMAIN,
          count
        }
      })

      const items = response.data.response.items

      if (!items.length) {
        await this.bot.sendMessage(chatId, 'üòï –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
        return
      }

      let output = `üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${items.length} –ø–æ—Å—Ç–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã ${GROUP_DOMAIN}:\n\n`

      for (const post of items) {
        output += `üïí –î–∞—Ç–∞: ${new Date(post.date * 1000).toLocaleString()}\n`
        output += `üìÑ –¢–µ–∫—Å—Ç: ${post.text.slice(0, 1000)}\n`
        output += '---\n\n'
      }

      const fileName = `group_${GROUP_DOMAIN}_${Date.now()}.txt`
      const filePath = path.join('/tmp', fileName) // –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞

      fs.writeFileSync(filePath, output)

      await this.bot.sendDocument(chatId, filePath, {}, {
        filename: fileName,
        contentType: 'text/plain'
      })

      fs.unlinkSync(filePath) // —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤:', error.response?.data || error.message)
      await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤.')
    }
  }


  async onFile (msg) {
    try {

    } catch (e) {
      console.log('Failed onFile', e.message)
    }
  }

  delay (minDelay, maxDelay) {
    const timeout = maxDelay ? ~~((minDelay + (maxDelay - minDelay) * Math.random())) : minDelay

    return new Promise(resolve => setTimeout(resolve, timeout))
  }

  async registration (msg) {
    try {
      if (/^\/start$/i.test(msg.text)) {
        const chatId = msg.from.id
        const text = `–ü—Ä–∏–≤–µ—Ç. –≠—Ç–æ –±–æ—Ç –ø–∞—Ä—Å–µ—Ä –∏ –æ–Ω –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ—Å–º–æ—Ç—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é. –ë–æ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è`
        await this.bot.sendMessage(chatId, text, { parse_mode: 'HTML' })
        const username = msg.from.username
        const firstName = msg.from.first_name
        const id = msg.from.id
        const profile = await userCollection.findOne({ id: id })
        if (!profile) {
          await userCollection.insertOne({
            id: id,
            firstName: firstName,
            username: username,
            banned: false,
            active: false,
            token: '',
            balance: 0
          })
          await this.bot.sendMessage(139280481, `<b>–í –±–æ—Ç–µ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\nusername: ${username}\nfirstName ${firstName}\nid: ${id}\n —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</b>`, { parse_mode: 'HTML' })
        }
      }
    } catch (e) {
      console.log('Failed registration', e.message)
    }
  }

  // –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∞–∑—ã id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ø–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
  async getLastPostId(group) {
    const state = await stateCollection.findOne({ group })
    return state?.lastPostId || 0
  }

  // –∑–∞–ø–∏—Å–∞—Ç—å –≤ –±–∞–∑—É –Ω–æ–≤—ã–π id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞
  async setLastPostId(group, postId) {
    await stateCollection.updateOne(
      { group },
      { $set: { lastPostId: postId } },
      { upsert: true }
    )
  }

  async parseAndPostToMyGroup () {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—é')
    const jobToken = process.env.TOKEN_VK_API // —Ç–æ–∫–µ–Ω –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

    for (const group of targetGroups) {
      try {
        const response = await axios.get('https://api.vk.com/method/wall.get', {
          params: {
            access_token: jobToken,
            v: '5.199',
            domain: group.domain,
            count: 20
          }
        })

        const items = response.data.response.items
        if (!items.length) continue

        const lastSavedId = await this.getLastPostId(group.domain)

        const blacklist = ['—Ç–∞–∫—Å–∏', '—Å–∫–∏–¥–∫–∞', '–∫—É–ø–æ–Ω', '–ø—Ä–æ–º–æ–∫–æ–¥']

        for (const post of items.reverse()) { // –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –∫ –Ω–æ–≤–æ–º—É
          const text = post.text?.trim()

          // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π
          if (!text) continue

          // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–Ω–æ –∏–∑ "–∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö" —Å–ª–æ–≤
          const lowerText = text.toLowerCase()
          if (blacklist.some(word => lowerText.includes(word))) {
            console.log(`‚õî –ü—Ä–æ–ø—É—â–µ–Ω –ø–æ—Å—Ç ID ${post.id} ‚Äî —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: ${text}`)
            continue
          }

          if (post.id > lastSavedId) {
            await axios.post('https://api.vk.com/method/wall.post', null, {
              params: {
                owner_id: jobGroup,
                from_group: 1,
                message: text,
                access_token: jobToken,
                v: '5.199'
              }
            })
            console.log(`‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç ID ${post.id} –∏–∑ ${group.domain}`)
            await this.setLastPostId(group.domain, post.id)
            await this.delay(15000) // –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏ –∂–¥–µ–º 15 —Å–µ–∫
          }
        }

      } catch (e) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑ ${group.domain}:`, e.response?.data || e.message)
      }
    }
  }


  stop () {
    if (this.bot) {
      this.bot.stop()
    }
  }
}